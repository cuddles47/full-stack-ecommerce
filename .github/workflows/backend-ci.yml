name: Backend CI/CD

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*' ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  lint-and-unit-test:
    name: Lint and Unit Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install Dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Lint Code
        working-directory: ./backend
        run: npm run lint
      
      - name: Run Unit Tests
        working-directory: ./backend
        run: npm run test:ci -- --testPathIgnorePatterns=integration
        env:
          NODE_ENV: test
          JWT_SECRET: test_secret_key
          JWT_EXPIRY: 1h
  
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-unit-test
    if: success()
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install Dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run Integration Tests
        working-directory: ./backend
        run: npm run test:ci -- --testPathPattern=integration
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/test
          JWT_SECRET: test_jwt_secret
          JWT_EXPIRY: 1h
      
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage
          retention-days: 14
  
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: integration-test
    if: success() && (github.event_name == 'push' || github.event_name == 'pull_request')
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: backend
      
      - name: Security Scanning
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
  
  build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [lint-and-unit-test, integration-test]
    if: success() && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/')))
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install Dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Build
        working-directory: ./backend
        run: npm run build
      
      - name: Create Build Info File
        working-directory: ./backend
        run: |
          echo "{\"build\": {\"version\": \"$(node -p "require('./package.json').version")\", \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"commit\": \"${{ github.sha }}\", \"branch\": \"${GITHUB_REF#refs/heads/}\"}}" > ./dist/BUILD_INFO.json
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist
          retention-days: 7
  
  deploy-canary:
    name: Deploy Canary Release
    runs-on: ubuntu-latest
    needs: build
    if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/'))
    environment: canary
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      
      - name: Build and push canary image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/kiwey-backend:canary-${{ env.BRANCH_NAME }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=canary-${{ env.BRANCH_NAME }}
            org.label-schema.vcs-ref=${{ github.sha }}
          build-args: |
            NODE_ENV=production
            COMMIT_SHA=${{ github.sha }}
            APP_VERSION=canary-${{ env.BRANCH_NAME }}
      
      # Canary Release Strategy
      - name: Create Kubernetes Canary Manifests
        run: |
          mkdir -p ./kubernetes-generated
          cat > ./kubernetes-generated/backend-canary.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: kiwey-backend-canary
            namespace: kiwey-canary
            labels:
              app: kiwey-backend
              version: canary-${{ env.BRANCH_NAME }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: kiwey-backend
                version: canary-${{ env.BRANCH_NAME }}
            template:
              metadata:
                labels:
                  app: kiwey-backend
                  version: canary-${{ env.BRANCH_NAME }}
              spec:
                containers:
                - name: kiwey-backend
                  image: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/kiwey-backend:canary-${{ env.BRANCH_NAME }}
                  ports:
                  - containerPort: 3001
                  env:
                  - name: NODE_ENV
                    value: "production"
                  - name: PORT
                    value: "3001"
                  - name: MONGODB_URI
                    valueFrom:
                      secretKeyRef:
                        name: backend-secrets
                        key: mongodb-uri
                  - name: JWT_SECRET
                    valueFrom:
                      secretKeyRef:
                        name: backend-secrets
                        key: jwt-secret
                  - name: JWT_EXPIRY
                    value: "1d"
                  - name: LOG_LEVEL
                    value: "debug"
                  - name: RELEASE_TYPE
                    value: "canary"
                  - name: COMMIT_SHA
                    value: "${{ github.sha }}"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 3001
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 3001
                    initialDelaySeconds: 15
                    periodSeconds: 5
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: kiwey-backend-canary
            namespace: kiwey-canary
          spec:
            selector:
              app: kiwey-backend
              version: canary-${{ env.BRANCH_NAME }}
            ports:
            - port: 3001
              targetPort: 3001
          ---
          apiVersion: networking.istio.io/v1alpha3
          kind: VirtualService
          metadata:
            name: kiwey-backend
            namespace: kiwey-canary
          spec:
            hosts:
            - "api.kiwey.example.com"
            gateways:
            - kiwey-gateway
            http:
            - match:
              - headers:
                  x-canary:
                    exact: "true"
              route:
              - destination:
                  host: kiwey-backend-canary
                  port:
                    number: 3001
              weight: 20
            - route:
              - destination:
                  host: kiwey-backend
                  port:
                    number: 3001
              weight: 80
          EOF
      
      - name: Deploy Canary to Kubernetes
        uses: Azure/k8s-deploy@v4
        with:
          manifests: |
            ./kubernetes-generated/backend-canary.yaml
          namespace: kiwey-canary
          strategy: canary
          percentage: 20
          route-method: header
          route-value: 'x-canary=true'
      
      - name: Automated Canary Analysis
        run: |
          echo "Running automated canary analysis for 5 minutes..."
          sleep 60 # Wait for deployment to be ready
          
          # Run canary analysis (simulated here, use Flagger, Kayenta, etc. in real environment)
          for i in {1..5}; do
            echo "Iteration $i: Checking canary metrics..."
            # In a real scenario, analyze metrics like error rate, latency, etc.
            # Example: curl "http://prometheus:9090/api/v1/query?query=sum(rate(http_requests_total{job='kiwey-backend',status=~'5..'}[1m]))/sum(rate(http_requests_total{job='kiwey-backend'}[1m]))"
            sleep 60
          done
          
          echo "Canary analysis completed successfully."
      
      - name: Create Deployment Status
        uses: bobheadxi/deployments@v1.4.0
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: canary
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://api-canary.kiwey.example.com
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/kiwey-backend:latest
            ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/kiwey-backend:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ github.sha }}
          build-args: |
            NODE_ENV=production
            COMMIT_SHA=${{ github.sha }}
      
      # Deploy to Production with Blue-Green Strategy
      - name: Deploy to Production
        uses: Azure/k8s-deploy@v4
        with:
          manifests: |
            ./kubernetes/backend.yaml
          images: |
            ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/kiwey-backend:${{ github.sha }}
          kubectl-version: 'latest'
          namespace: kiwey-production
          strategy: blue-green
          traffic-split-method: pod
          promote: auto
          promote-delay: 180s
      
      - name: Notify Deployment Status
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: Backend Deployment Status
          SLACK_MESSAGE: ${{ job.status == 'success' && ':rocket: Backend deployment to Production succeeded!' || ':x: Backend deployment to Production failed!' }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_FOOTER: "Commit: ${{ github.sha }} | Deployed by: ${{ github.actor }}"